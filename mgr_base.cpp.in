// AUTO-GENERATED CODE - Do not edit directly!
/* This code is edited to the final compiled form by prepare_interpolators.py
*/

#include <vector>
#include <unordered_map>
#include <string>
#include <sstream>

#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>
#include "nd_interp_mgr.h"

#include "$FILE_PREFIX.h"

namespace py=pybind11;

$C_CLASS_NAME::$C_CLASS_NAME()
    : Interpolation_Mgr<fp_type>()
{
    $CONSTRUCTOR
}


namespace {
    void init_$PY_CLASS_NAME(py::module& m)
    {
        py::class_<$C_CLASS_NAME, std::unique_ptr<$C_CLASS_NAME, py::nodelete>>(m, "$PY_CLASS_NAME")
            .def(py::init([]()
                {
                    return std::unique_ptr<$C_CLASS_NAME, py::nodelete>(&$C_CLASS_NAME::instance());
                }))
            $EXTRA_DEFS
            .def("interpolate_single",
                [](const $C_CLASS_NAME& self, const char* name,
                    py::array_t<fp_type, py::array::c_style|py::array::forcecast> angles)
                {
                    auto info = angles.request();
                    auto dim = self.dim(name);
                    if (info.ndim != 1 || (size_t)info.shape[0] !=dim)
                    {
                        std::stringstream err_str;
                        err_str << "Angles for " << name << " should be a (1 x "
                            << dim << ") array! If you want to perform a set of "
                            << "interpolations at once, use interpolate().";
                        throw std::runtime_error(err_str.str());
                    }
                    fp_type* data;
                    std::vector<fp_type> data_vec;
                    // If input data is not fp_type, convert it
                    if (info.format != py::format_descriptor<fp_type>::format())
                    {
                        for (size_t i=0; i < dim; ++i)
                            data_vec.push_back(*angles.data(i));
                        data = data_vec.data();
                    } else {
                        data = (fp_type*)info.ptr;
                    }
                    return self.interpolate(name, data);
                },
                "$INTERPOLATE_SINGLE_DOCSTRING"
                )
            .def("interpolate",
                [](const $C_CLASS_NAME& self, const char* name,
                    py::array_t<fp_type, py::array::c_style|py::array::forcecast> angles)
                {
                    // Safety checks
                    auto info = angles.request();
                    auto dim = self.dim(name);
                    if (info.ndim != 2 || (size_t)info.shape[1] !=dim)
                    {
                        std::stringstream err_str;
                        err_str << "Angles for " << name << " should be a (n x "
                            << dim << ") array!";
                        throw std::runtime_error(err_str.str());
                    }
                    size_t n = (size_t)info.shape[0];
                    fp_type* data;
                    std::vector<fp_type> data_vec;
                    // If input data is not fp_type, convert it
                    if (info.format != py::format_descriptor<fp_type>::format())
                    {
                        for (size_t i=0; i<n; ++i)
                            for (size_t j=0; j<dim; ++j)
                                data_vec.push_back(*angles.data(i,j));
                        data = data_vec.data();
                    } else {
                        data = (fp_type*)(info.ptr);
                    }
                    py::array_t<fp_type> ret(n);
                    fp_type* ptr = (fp_type*)ret.request().ptr;
                    self.interpolate(name, data, n, ptr);
                    return ret;
                },
                "$INTERPOLATE_MULTIPLE_DOCSTRING"
                )
            .def("keys",
                [](const $C_CLASS_NAME& self)
                {
                    std::vector<std::string> names;
                    char buf[self.max_name_length()];
                    auto n = self.num_maps();
                    for (size_t i=0; i<n; ++i)
                    {
                        self.map_name(i, buf);
                        names.push_back(std::string(buf));
                    }
                    return names;
                })
            .def("num_maps", &$C_CLASS_NAME::num_maps)
            .def("dim", &$C_CLASS_NAME::dim)
            ;

    }
} //anonymous namespace

PYBIND11_MODULE($PY_MODULE_NAME, m) {
    m.doc() = "$PY_DOCSTRING";
    init_$PY_CLASS_NAME(m);
}
